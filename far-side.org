# -*- coding: utf-8 -*-
#+STARTUP: showall inlineimages
#+TITLE: Far Side
#+AUTHOR: Роман Зайруллин
#+EMAIL: krosenmann@gmail.com
#+descriptions: CRPG on python
#+language: ru
#+options: TeX:t LaTeX:t
* License
  Оригинал
  [[./LICENSE]]
  
* CRPG. Введение
  Этот документ содержит все. И предусматривает все.
  Вдохновленный Shadowrun, Fallout, ADOM и различными TDS, я хочу поместить
  вас в мир, в котором нет магии, зато есть пар и электричество. И,
  может быть, немного клюквы. Ну и нефть еще. И вообще много всяких
  интересных штук.
** Дисплей и настройки
   По умолчанию дисплей имеет разрешение 640х480, это значение
   захардкожено, как способное сработать наверняка.
   #+begin_src python :tangle display.py
     import pygame
     #from pygame.locals import *
     #from OpenGL.GL import *
     #from OpenGL.GLU import *
     from ConfigParser import SafeConfigParser

     parser = SafeConfigParser()
     try:
         parser.read('gameconfig.cfg')
         resolution = parser.get('display','resolution')
     except:
         print TypeError
         resolution = (640, 480)
     #import surface

     class Display:
         def __init__(self):
             pygame.init()
             pygame.display.set_caption("Far Prototype")
             self.set_display(resolution)
   #+end_src
   Конфигурирование:
   #+begin_src conf :tuple gameconfig.cfg
     [display]
             resolution = 640, 480
             color = 32
             fullscreen = False
             
   #+end_src
** TODO Дисплей
   Добавить чтение конфигов
   #+begin_src python
     # -*- coding: utf8 -*-
     from ConfigParser import SafeConfigParser


         
   #+end_src

** Инструменты и начальный набор функций.
   Для игры используются стандартные d10, d4, d6, d12, d20 дайсы.
#+begin_src python :tangle functions.py
# -*- coding: utf-8 -*-
import random

def d10():
 random.seed(100)
 return random.randint(1, 10)

def d4():
 random.seed(100)
 return random.randint(1, 4)

def d6():
 random.seed(100)
 return random.randint(1, 6)

def d12():
 random.seed(100)
 return random.randint(1, 12)

def d20():
 random.seed(100)
 return random.randint(1, 20)
#+end_src
   Все настройки хранятся в файле "game.conf", а сами объекты должны
   создаваться из файлов с описаниями этих самых объектов. Это позволит
   без больших проблем расширять игру, наполнять ее контентом, и, при
   необходимости, перенести на какой-нибудь другой
   язык\платформу. Достаточно будет просто переписать транслятор. 
   Дуаю, лучше использовать csv и юниксовый конфиг-формат. Они уже
   написаны. Хотя, все равно придется что-то выдумать.
** Внутренний язык игры.
     Конечно же csv для табличных данных, конфиг формат для конфигов
   (ибо из коробки все поддерживется, стандартная библиотека
   ванлав). Да и логику синей изолентой. Нечего выдумывать. Все что
   нужно -- имеется. Ура, товарищи. 




* Ролевая система
** Характеристики
  Проблема выбора ролевой системы в наличии магии у большинства
  РПГ. Я, конечно, поклонник фентези, но в своем проекте использовать
  ее не хочу. На самом деле, это ж уже достаточно приевшаяся тема и
  кто только не делает РПГ с магией и красотками. Я же хочу окунуться
  в мир альтернативной истории в компании с Говардом Радостью-моим
  Лавкрафтом.
  Итак. Характеристики. (d10 при создании, с
  возможностью корректировки)
  - Сила    
  - Ловкость  
  - Интеллект
  - Восприятие
  - Здоровье[fn:2]
  - Харизма[fn:1]
  - Удача
  - Воля

** Перки
  Так же, каждый персонаж должен иметь инвентарь (чтоб безумным манчам
  было откуда собирать лут).
  Помимо основных характеристик, персонажи так же имеют различные навыки
  различные навыки:
  - Оружие, боевые навыки
    * Холодное
    * Огнестрельное
    * Рукопашный бой
  - Техника
    * Взлом
    * Ремонт
  - Исследования
  - Люди
    * Кража
    * Ложь
    * Убеждение
    * Хитрость
  - Медицина
    * Хирургия
    * Первая помощь
  Так же, естественно, каждый персонаж имеет имя, пол, вид (человек,
  собака, дерево), уровень (номинальное количество ХР) и описание. 
** TODO Разработать (утащить) формулы для учета экспы и уровней.
#+begin_src python :tangle game-classes.py
  # -*- coding: utf-8 -*-

  class Сharacter:
   def __init__(self, characterName):
     self.characterName = ""
     self.description = ""

     self.strength = 0
     self.agila = 0
     self.intellegense = 0
     self.perception = 0
     self.body = 0
     self.charisma = 0
     self.luck = 0
     self.will = 0
     
     self.perks = { 'meele-weapon': 0, 'guns': 0, 'meele': 0, 
             'breaking': 0, 'repair': 0, 'investigation': 0, 
             'research': 0, 
             'stealing': 0, 'lie': 0, 'conviction':0, 'tricks':0,
             'surgeons': 0, 'first-aid': 0}
     self.xp = 0
     self.lvl = 1
     self.description = ""
     self.sort = ""
     self.inventory = []
     self.log = ""

   def lvlup(self, xp, lvl):
   
   def death(self):
       itemsDrop(self.inventory)
       self.description+=log
#+end_src
** Создание персонажа
   Персонаж создается броском d10
#+begin_src python :tangle player.py
  # -*- coding: utf-8 -*-
  from game-classes import *
  from functions import *

  name = 'None'
  def createHero():
    
    return playerStat
     
   
  player = Сharacter(name, playerStat, playerPerks)
    
#+end_src
** Аффекты
  
* Сценарии


#+begin_src python :tangle main.py
#!/usr/bin/python
# -*- coding: utf-8 -*-

import pygame as pg
from game-classes import *
from functions import *
from player import *
from datetime import datetime
import numpy as np





#+end_src
  
* Таблицы

** НПС
** Бестиарий
** Предметы
*** Оружие
*** Одежда
*** Инструменты
*** Расходуемые
*** Хлам
    
* Локации
  Важной частью повествования является карта. Для более эффективного
  построения локаций разобьем карту на участки, от которых и будем
  отталкиваться. Пример: имеется некоторый участок под названием
  "город". Тип участка задает колличество домов, площадь, и плотность
  построения этих самых домов. Которая будет немного варьироваться от
  города к городу. Если это город. То как минимум он будет иметь:
  - Церковь
  - Большую школу
  - Общепит
  - Суд
  - Полицейский участок
  - Больницу
  Большой город имеет на границе помимо вышеперечисленного:
  - Тюрьму на границе города
  - Колледж\Университет
  - Промышленное строение. (Завод, фабрика, иже)
  Я не вижу смысла делать больше трех крупных городов. Каждый из которых
  будет своеобразным центром.
  От крупных поселений более мелкие располагаются радиально, в
  соотвествии с местностью и более мелкие зависят от ближайшего по
  величине. Т.е. Карта опирается на укроподобный граф. Вот
  так. Опирается, но не следует ему бесприкословно.
  Так как мастер каждую новую игру начинает с нуля, соответственно,
  названия местностей меняются каждое прохождение, хотя, вероятность
  совпрадения, определенно, присутствует.
#+begin_src python :tangle map.py
  import random

  typeMap = ['big_sity', 'medium_city', 'small_city', 'village']
  labelsFile = open('labels.fst', 'r')
  labelsTowns = labelsFile.read()


#+end_src

  
* Звук 
** libpd и прочее
   Конечно, процедурный синтез, во многом, это все затевается ради
   него. Помимо, конечно, изменяющегося, в зависимости от
   происходящего, саундтрека. Мне хочется полностью обойтись без
   предзаписанного звука. Это позволит использовать разнообразное
   окружение, гибкое и интересное. И при этом игра не будет много
   весить.

* Footnotes

[fn:1] 
Если, конечно, я не придумаю чего иного

[fn:2] Аналогично характеристике "Телосложение" в ДНД-лайк системахз

